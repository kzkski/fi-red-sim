[
    {
        "id": "temperature-simulation",
        "type": "tab",
        "label": "温度センサーシミュレーション",
        "disabled": false,
        "info": "異常値生成機能付き温度センサーシミュレーションフロー"
    },
    {
        "id": "ui-tab",
        "type": "ui_tab",
        "name": "センサー",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "sensor-config-group",
        "type": "ui_group",
        "name": "センサー設定",
        "tab": "ui-tab",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "anomaly-config-group",
        "type": "ui_group",
        "name": "異常値設定",
        "tab": "ui-tab",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "sensor-data-group",
        "type": "ui_group",
        "name": "センサーデータ",
        "tab": "ui-tab",
        "order": 3,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "orion-status-group",
        "type": "ui_group",
        "name": "Orion連携状態",
        "tab": "ui-tab",
        "order": 4,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "3229e81b2be3ad41",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED ダッシュボード",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "YYYY/MM/DD",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 8,
                "gy": 8,
                "cx": 8,
                "cy": 8,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "config-form",
        "type": "ui_form",
        "z": "temperature-simulation",
        "name": "センサー設定フォーム",
        "label": "センサー設定",
        "group": "sensor-config-group",
        "order": 1,
        "width": "6",
        "height": "8",
        "options": [
            {
                "label": "センサーID",
                "value": "sensorId",
                "type": "text",
                "required": true
            },
            {
                "label": "緯度",
                "value": "latitude",
                "type": "number",
                "required": true
            },
            {
                "label": "経度",
                "value": "longitude",
                "type": "number",
                "required": true
            },
            {
                "label": "説明",
                "value": "description",
                "type": "text",
                "required": false
            },
            {
                "label": "基準温度 (°C)",
                "value": "baseTemp",
                "type": "number",
                "required": true
            },
            {
                "label": "変動範囲 (±°C)",
                "value": "variation",
                "type": "number",
                "required": true
            },
            {
                "label": "更新間隔 (秒)",
                "value": "interval",
                "type": "number",
                "required": true
            }
        ],
        "formValue": {
            "sensorId": "sensor-001",
            "latitude": 35.6812,
            "longitude": 139.7671,
            "description": "温度センサー001",
            "baseTemp": 25,
            "variation": 2,
            "interval": 5
        },
        "payload": "",
        "submit": "更新",
        "cancel": "キャンセル",
        "topic": "sensor",
        "x": 160,
        "y": 420,
        "wires": [
            [
                "config-function"
            ]
        ]
    },
    {
        "id": "config-function",
        "type": "function",
        "z": "temperature-simulation",
        "name": "設定保存",
        "func": "// 設定を更新\nlet config = global.get('sensorConfig') || {};\n\n// 数値型に変換\nconfig = {\n    ...config,\n    sensorId: msg.payload.sensorId,\n    latitude: Number(msg.payload.latitude),\n    longitude: Number(msg.payload.longitude),\n    description: msg.payload.description,\n    baseTemp: Number(msg.payload.baseTemp),\n    variation: Number(msg.payload.variation),\n    interval: Number(msg.payload.interval)\n};\n\n// グローバル変数に保存\nglobal.set('sensorConfig', config);\n\n// フォームの値を更新\nreturn [{\n    topic: 'form',\n    payload: msg.payload\n}, msg];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 60,
        "y": 180,
        "wires": [
            [
                "config-form"
            ],
            [
                "temp-sim-inject"
            ]
        ]
    },
    {
        "id": "anomaly-form",
        "type": "ui_form",
        "z": "temperature-simulation",
        "name": "異常値設定フォーム",
        "label": "異常値設定",
        "group": "anomaly-config-group",
        "order": 1,
        "width": "6",
        "height": "12",
        "options": [
            {
                "label": "異常値タイプ",
                "value": "anomalyType",
                "type": "select",
                "options": [
                    {
                        "label": "なし",
                        "value": "none"
                    },
                    {
                        "label": "スパイク",
                        "value": "spike"
                    },
                    {
                        "label": "センサー故障",
                        "value": "failure"
                    },
                    {
                        "label": "通信エラー",
                        "value": "communication"
                    },
                    {
                        "label": "トレンド変化",
                        "value": "trend"
                    },
                    {
                        "label": "周期的な異常",
                        "value": "periodic"
                    },
                    {
                        "label": "ノイズ増加",
                        "value": "noise"
                    }
                ],
                "required": true
            },
            {
                "label": "発生確率 (%)",
                "value": "anomalyProbability",
                "type": "number",
                "min": 0,
                "max": 100,
                "required": true
            },
            {
                "label": "強度",
                "value": "anomalyIntensity",
                "type": "number",
                "min": 1,
                "max": 10,
                "required": true
            },
            {
                "label": "トレンドの方向",
                "value": "trendDirection",
                "type": "select",
                "options": [
                    {
                        "label": "上昇",
                        "value": "up"
                    },
                    {
                        "label": "下降",
                        "value": "down"
                    }
                ],
                "required": true
            },
            {
                "label": "変化速度（°C/分）",
                "value": "trendRate",
                "type": "number",
                "min": 0.1,
                "max": 5,
                "required": true
            },
            {
                "label": "周期（秒）",
                "value": "period",
                "type": "number",
                "min": 5,
                "max": 300,
                "required": true
            },
            {
                "label": "持続時間（秒）",
                "value": "duration",
                "type": "number",
                "min": 1,
                "max": 60,
                "required": true
            }
        ],
        "formValue": {
            "anomalyType": "none",
            "anomalyProbability": 0,
            "anomalyIntensity": 1,
            "trendDirection": "up",
            "trendRate": 1,
            "period": 60,
            "duration": 10
        },
        "payload": "",
        "submit": "更新",
        "cancel": "キャンセル",
        "topic": "anomaly",
        "x": 440,
        "y": 120,
        "wires": [
            [
                "anomaly-function"
            ]
        ]
    },
    {
        "id": "anomaly-function",
        "type": "function",
        "z": "temperature-simulation",
        "name": "異常値設定保存",
        "func": "// 設定を更新\nlet config = global.get('sensorConfig') || {};\n\n// 数値型に変換\nconfig = {\n    ...config,\n    anomalyType: msg.payload.anomalyType,\n    anomalyProbability: Number(msg.payload.anomalyProbability),\n    anomalyIntensity: Number(msg.payload.anomalyIntensity),\n    trendDirection: msg.payload.trendDirection,\n    trendRate: Number(msg.payload.trendRate),\n    period: Number(msg.payload.period),\n    duration: Number(msg.payload.duration)\n};\n\n// グローバル変数に保存\nglobal.set('sensorConfig', config);\n\n// フォームの値を更新\nreturn [{\n    topic: 'form',\n    payload: msg.payload\n}, msg];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 80,
        "y": 320,
        "wires": [
            [
                "anomaly-form"
            ],
            [
                "temp-sim-inject"
            ]
        ]
    },
    {
        "id": "status-text",
        "type": "ui_text",
        "z": "temperature-simulation",
        "group": "anomaly-config-group",
        "order": 2,
        "width": "6",
        "height": "1",
        "name": "現在の状態",
        "label": "現在の状態",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 790,
        "y": 360,
        "wires": []
    },
    {
        "id": "store-config",
        "type": "function",
        "z": "temperature-simulation",
        "name": "Store Configuration",
        "func": "// グローバルコンテキストに設定を保存\nlet config = global.get('sensorConfig') || {};\n\nswitch(msg.topic) {\n    case 'sensorId':\n        config.sensorId = msg.payload;\n        break;\n    case 'location':\n        config.latitude = msg.payload.latitude;\n        config.longitude = msg.payload.longitude;\n        config.description = msg.payload.description;\n        break;\n    case 'parameters':\n        config.baseTemp = msg.payload.baseTemp;\n        config.variation = msg.payload.variation;\n        config.interval = msg.payload.interval;\n        break;\n    case 'anomaly':\n        config.anomalyType = msg.payload.anomalyType;\n        config.anomalyProbability = msg.payload.probability;\n        config.anomalyIntensity = msg.payload.intensity;\n        break;\n}\n\nglobal.set('sensorConfig', config);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// 初期設定\nlet config = {\n    sensorId: 'urn:ngsi-ld:TemperatureSensor:001',\n    latitude: 35.6812,\n    longitude: 139.7671,\n    description: 'Temperature Sensor 001',\n    baseTemp: 20,\n    variation: 0.5,\n    interval: 1,\n    anomalyType: 'none',\n    anomalyProbability: 10,\n    anomalyIntensity: 3\n};\nglobal.set('sensorConfig', config);",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 40,
        "wires": [
            [
                "update-injection"
            ]
        ]
    },
    {
        "id": "update-injection",
        "type": "change",
        "z": "temperature-simulation",
        "name": "Update Injection Interval",
        "rules": [
            {
                "t": "set",
                "p": "interval",
                "pt": "msg",
                "to": "global.get('sensorConfig').interval",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 690,
        "y": 80,
        "wires": [
            [
                "temp-sim-inject"
            ]
        ]
    },
    {
        "id": "temp-sim-inject",
        "type": "inject",
        "z": "temperature-simulation",
        "name": "定期実行",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 500,
        "wires": [
            [
                "temp-sim-function"
            ]
        ]
    },
    {
        "id": "temp-sim-function",
        "type": "function",
        "z": "temperature-simulation",
        "name": "温度データ生成",
        "func": "// グローバル変数の初期化\nif (!context.get('startTime')) {\n    context.set('startTime', Date.now());\n    context.set('lastTemp', null);\n    context.set('anomalyStartTime', null);\n    context.set('baselineTemp', null);\n}\n\n// 設定を取得\nconst config = global.get('sensorConfig');\nconst now = Date.now();\n\n// 基本温度の生成\nlet temp = config.baseTemp + (Math.random() * 2 - 1) * config.variation;\nlet status = '正常';\n\n// 異常値の生成\nif (config.anomalyType !== 'none') {\n    let probability = config.anomalyProbability / 100;\n    \n    // 周期的な異常の場合、時間に基づいて確率を調整\n    if (config.anomalyType === 'periodic') {\n        const elapsed = (now % (config.period * 1000)) / 1000;\n        if (elapsed < config.duration) {\n            probability = 1;\n        } else {\n            probability = 0;\n        }\n    }\n    \n    if (Math.random() < probability) {\n        switch (config.anomalyType) {\n            case 'spike':\n                // スパイク異常: 基準値から大きく外れた値\n                const direction = Math.random() < 0.5 ? 1 : -1;\n                temp += direction * (5 + config.anomalyIntensity * 2);\n                status = 'スパイク異常';\n                break;\n                \n            case 'failure':\n                // センサー故障: ノイズの多い値または一定値\n                if (Math.random() < 0.5) {\n                    // 一定値\n                    temp = config.baseTemp;\n                    status = 'センサー故障（固定値）';\n                } else {\n                    // 大きなノイズ\n                    temp = config.baseTemp + (Math.random() * 20 - 10) * config.anomalyIntensity;\n                    status = 'センサー故障（ノイズ）';\n                }\n                break;\n                \n            case 'communication':\n                // 通信エラー: nullまたは不正な値\n                if (Math.random() < 0.5) {\n                    temp = null;\n                    status = '通信エラー（データなし）';\n                } else {\n                    temp = NaN;\n                    status = '通信エラー（不正値）';\n                }\n                break;\n                \n            case 'trend':\n                // トレンド変化: 徐々に上昇または下降\n                if (!context.get('anomalyStartTime')) {\n                    context.set('anomalyStartTime', now);\n                    context.set('baselineTemp', temp);\n                }\n                \n                const minutesElapsed = (now - context.get('anomalyStartTime')) / (60 * 1000);\n                const change = config.trendRate * minutesElapsed;\n                temp = context.get('baselineTemp') + (config.trendDirection === 'up' ? change : -change);\n                status = 'トレンド変化（' + (config.trendDirection === 'up' ? '上昇' : '下降') + '）';\n                break;\n                \n            case 'periodic':\n                // 周期的な異常: 一定間隔で発生\n                const anomalyMagnitude = 5 + config.anomalyIntensity * 2;\n                temp += anomalyMagnitude;\n                status = '周期的な異常';\n                break;\n                \n            case 'noise':\n                // ノイズ増加: 標準偏差の増加\n                const noiseLevel = config.variation * (1 + config.anomalyIntensity);\n                temp = config.baseTemp + (Math.random() * 2 - 1) * noiseLevel;\n                status = 'ノイズ増加';\n                break;\n        }\n    } else if (config.anomalyType === 'trend' && context.get('anomalyStartTime')) {\n        // トレンド変化の継続\n        const minutesElapsed = (now - context.get('anomalyStartTime')) / (60 * 1000);\n        const change = config.trendRate * minutesElapsed;\n        temp = context.get('baselineTemp') + (config.trendDirection === 'up' ? change : -change);\n        status = 'トレンド変化（' + (config.trendDirection === 'up' ? '上昇' : '下降') + '）';\n    }\n}\n\n// 前回の値を保存\ncontext.set('lastTemp', temp);\n\n// ゲージとグラフ用のメッセージ\nconst sensorMsg = {\n    payload: {\n        temperature: temp,\n        timestamp: now\n    }\n};\n\n// ステータス表示用のメッセージ\nconst statusMsg = { payload: status };\n\n// Smart Data Models用のメッセージ（属性更新用フォーマット）\nconst ngsiMsg = {\n    payload: {\n        \"dateObserved\": {\n            \"type\": \"DateTime\",\n            \"value\": new Date(now).toISOString()\n        },\n        \"temperature\": {\n            \"type\": \"Number\",\n            \"value\": temp\n        },\n        \"status\": {\n            \"type\": \"Text\",\n            \"value\": status\n        }\n    }\n};\n\nnode.send([sensorMsg, statusMsg, ngsiMsg]);\nreturn [sensorMsg, statusMsg, ngsiMsg];",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 580,
        "wires": [
            [
                "temp-sim-gauge",
                "temp-sim-chart"
            ],
            [
                "status-text"
            ],
            [
                "temp-sim-debug",
                "orion-update-url"
            ]
        ]
    },
    {
        "id": "temp-sim-debug",
        "type": "debug",
        "z": "temperature-simulation",
        "name": "Monitor Temperature",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 860,
        "wires": []
    },
    {
        "id": "temp-sim-gauge",
        "type": "ui_gauge",
        "z": "temperature-simulation",
        "name": "温度ゲージ",
        "group": "sensor-data-group",
        "order": 1,
        "width": "6",
        "height": "6",
        "gtype": "gage",
        "title": "現在の温度",
        "label": "°C",
        "format": "{{msg.payload.temperature | number:1}}",
        "min": 0,
        "max": "40",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "15",
        "seg2": "30",
        "diff": false,
        "className": "",
        "x": 790,
        "y": 280,
        "wires": []
    },
    {
        "id": "temp-sim-chart",
        "type": "ui_chart",
        "z": "temperature-simulation",
        "name": "温度トレンド",
        "group": "sensor-data-group",
        "order": 2,
        "width": "12",
        "height": "6",
        "label": "温度トレンド",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "40",
        "removeOlder": "10",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 790,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "orion-format",
        "type": "function",
        "z": "temperature-simulation",
        "name": "Orion更新結果整形",
        "func": "// レスポンスステータスに基づいて状態を設定\nlet status = msg.statusCode === 204 ? '成功' : 'エラー';\n\n// 更新時刻を取得\nconst timestamp = new Date().toLocaleString('ja-JP');\n\n// UIに表示するメッセージを作成\nreturn {\n    payload: `更新時刻: ${timestamp}\\n状態: ${status}`\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 640,
        "wires": [
            [
                "orion-status-text",
                "orion-debug"
            ]
        ]
    },
    {
        "id": "orion-update-url",
        "type": "function",
        "z": "temperature-simulation",
        "name": "URL構築",
        "func": "const config = global.get('sensorConfig');\n\nif (!config || !config.sensorId) {\n    node.error('センサーIDが設定されていません');\n    return null;\n}\n\n// URLを構築\nconst url = `http://orion:1026/v2/entities/${config.sensorId}/attrs`;\n\n// 送信データを保持\nconst sentData = msg.payload;\n\n// 元のメッセージを保持しつつ、URLを追加\nreturn { \n    ...msg,\n    url: url,\n    originalPayload: sentData\n};\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 580,
        "wires": [["orion-update"]]
    },
    {
        "id": "orion-update",
        "type": "http request",
        "z": "temperature-simulation",
        "name": "Orion更新",
        "method": "PATCH",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "application/json",
                "valueType": "other",
                "valueValue": ""
            }
        ],
        "x": 600,
        "y": 580,
        "wires": [["orion-format"]]
    },
    {
        "id": "orion-debug",
        "type": "debug",
        "z": "temperature-simulation",
        "name": "Orion更新結果",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 580,
        "wires": []
    },
    {
        "id": "orion-status-text",
        "type": "ui_text",
        "z": "temperature-simulation",
        "group": "orion-status-group",
        "order": 1,
        "width": "12",
        "height": "3",
        "name": "Orion更新状態",
        "label": "Orion更新状態",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 790,
        "y": 640,
        "wires": []
    },
    {
        "id": "orion-create",
        "type": "http request",
        "z": "temperature-simulation",
        "name": "エンティティ作成",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://orion:1026/v2/entities",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "application/json",
                "valueType": "other",
                "valueValue": ""
            }
        ],
        "x": 520,
        "y": 600,
        "wires": [["orion-create-check"]]
    },
    {
        "id": "orion-create-function",
        "type": "function",
        "z": "temperature-simulation",
        "name": "エンティティ作成データ",
        "func": "const config = global.get('sensorConfig');\n\n// 設定のバリデーション\nif (!config) {\n    node.error('センサー設定が存在しません');\n    return null;\n}\n\nif (!config.sensorId) {\n    node.error('センサーIDが設定されていません');\n    return null;\n}\n\n// デバッグ出力\nnode.warn('エンティティ作成データ生成: ' + JSON.stringify(config));\n\nreturn {\n    payload: {\n        \"id\": config.sensorId,\n        \"type\": \"TemperatureSensor\",\n        \"dateObserved\": {\n            \"type\": \"DateTime\",\n            \"value\": new Date().toISOString()\n        },\n        \"temperature\": {\n            \"type\": \"Number\",\n            \"value\": config.baseTemp\n        },\n        \"unit\": {\n            \"type\": \"Text\",\n            \"value\": \"CEL\"\n        },\n        \"accuracy\": {\n            \"type\": \"Number\",\n            \"value\": 0.1\n        },\n        \"description\": {\n            \"type\": \"Text\",\n            \"value\": config.description\n        },\n        \"location\": {\n            \"type\": \"geo:json\",\n            \"value\": {\n                \"type\": \"Point\",\n                \"coordinates\": [config.longitude, config.latitude]\n            }\n        },\n        \"status\": {\n            \"type\": \"Text\",\n            \"value\": \"正常\"\n        }\n    }\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 600,
        "wires": [["orion-create"]]
    },
    {
        "id": "orion-create-inject",
        "type": "inject",
        "z": "temperature-simulation",
        "name": "初期化トリガー",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 20,
        "wires": [
            [
                "init-config"
            ]
        ]
    },
    {
        "id": "init-config",
        "type": "function",
        "z": "temperature-simulation",
        "name": "初期設定",
        "func": "// 初期設定\nlet config = {\n    sensorId: 'sensor-001',\n    latitude: 35.6812,\n    longitude: 139.7671,\n    description: '温度センサー001',\n    baseTemp: 25,\n    variation: 2,\n    interval: 5,\n    anomalyType: 'none',\n    anomalyProbability: 0,\n    anomalyIntensity: 1,\n    trendDirection: 'up',\n    trendRate: 1,\n    period: 60,\n    duration: 10\n};\n\n// グローバル変数に保存\nglobal.set('sensorConfig', config);\n\n// デバッグ出力\nnode.warn('初期設定完了: ' + JSON.stringify(config));\n\n// 次のノードへconfig情報を渡す\nmsg.config = config;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 120,
        "y": 60,
        "wires": [
            [
                "orion-create-function"
            ]
        ]
    },
    {
        "id": "orion-create-check",
        "type": "function",
        "z": "temperature-simulation",
        "name": "作成結果確認",
        "func": "// エンティティ作成の結果を確認\nif (msg.statusCode === 201) {\n    node.status({fill:\"green\", shape:\"dot\", text:\"作成成功\"});\n    // 成功メッセージを表示\n    const successMsg = {\n        payload: `エンティティ作成成功: ${msg.statusCode}\\nID: ${msg.req.payload.id}`\n    };\n    // データ生成を開始\n    return [msg, successMsg];\n} else if (msg.statusCode === 422) {\n    // エンティティが既に存在する場合\n    node.status({fill:\"yellow\", shape:\"ring\", text:\"既に存在\"});\n    // 警告メッセージを表示\n    const warningMsg = {\n        payload: `エンティティは既に存在します: ${msg.statusCode}\\nID: ${msg.req.payload.id}`\n    };\n    // データ生成を開始\n    return [msg, warningMsg];\n} else {\n    node.status({fill:\"red\", shape:\"ring\", text:\"エラー: \" + msg.statusCode});\n    node.error('エンティティ作成エラー: ' + JSON.stringify(msg.payload));\n    // エラーメッセージを表示\n    return [null, {\n        payload: `エンティティ作成エラー: ${msg.statusCode}\\n${JSON.stringify(msg.payload, null, 2)}`\n    }];\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 600,
        "wires": [
            [
                "temp-sim-inject"
            ],
            [
                "orion-status-text"
            ]
        ]
    }
]