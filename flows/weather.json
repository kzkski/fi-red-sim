[
    {
        "id": "weather-simulation",
        "type": "tab",
        "label": "気象センサーシミュレーション",
        "disabled": false,
        "info": "気象センサー（温度、湿度、照度、降雨量、風速、風向、気圧）のシミュレーションとOrion Context Broker連携"
    },
    {
        "id": "weather-inject",
        "type": "inject",
        "z": "weather-simulation",
        "name": "定期実行（5分）",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "weather",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 80,
        "wires": [
            [
                "weather-generator"
            ]
        ]
    },
    {
        "id": "weather-generator",
        "type": "function",
        "z": "weather-simulation",
        "name": "気象データ生成",
        "func": "// 気象データ生成関数\nconst maxDelay = 3000; // 最大遅延時間（ミリ秒）\n\n// ノードIDからハッシュを生成してセンサーID作成\nconst hash = Math.abs(node.id.split('').reduce((a, b) => {\n    a = ((a << 5) - a) + b.charCodeAt(0);\n    return a & a;\n}, 0));\nconst sensorId = \"weather_\" + hash.toString().substring(0, 6);\n\n// ランダムな遅延を設定（0〜maxDelayミリ秒）\nconst delay = Math.floor(Math.random() * maxDelay);\n\n// 各気象データの生成\n// 温度: -10℃〜50℃ ±1.0〜1.5℃\nconst baseTemp = 20; // 基準温度\nconst tempVariation = 2.5; // 変動幅\nconst temperature = Math.round((baseTemp + (Math.random() * tempVariation * 2 - tempVariation)) * 10) / 10;\n\n// 湿度: 0%〜90% (90%以上は90%と表示)\nconst baseHumidity = 60; // 基準湿度\nconst humidityVariation = 30; // 変動幅\nlet humidity = Math.round(baseHumidity + (Math.random() * humidityVariation * 2 - humidityVariation));\nhumidity = Math.min(90, Math.max(0, humidity)); // 0〜90%の範囲に制限\n\n// 照度: 0lx〜150,000lx\nconst maxIlluminance = 150000;\nconst illuminance = Math.round(Math.random() * maxIlluminance);\n\n// 降雨量: 0〜300mm\nconst maxRainfall = 300;\nconst rainfall = Math.round(Math.random() * maxRainfall * 10) / 10; // 小数点1桁\n\n// 風速: 0〜50m/s\nconst maxWindSpeed = 50;\nconst windSpeed = Math.round(Math.random() * maxWindSpeed * 10) / 10; // 小数点1桁\n\n// 風向: 8方向 (N, NE, E, SE, S, SW, W, NW)\nconst windDirections = [\"N\", \"NE\", \"E\", \"SE\", \"S\", \"SW\", \"W\", \"NW\"];\nconst windDirectionIndex = Math.floor(Math.random() * windDirections.length);\nconst windDirection = windDirections[windDirectionIndex];\n\n// 気圧: 400〜1100hPa\nconst minPressure = 400;\nconst maxPressure = 1100;\nconst pressure = Math.round(minPressure + Math.random() * (maxPressure - minPressure));\n\n// センサー情報を付加したメッセージを作成\nconst newMsg = {\n    payload: {\n        id: sensorId,\n        type: \"WeatherStation\",\n        timestamp: new Date().toISOString(),\n        temperature: {\n            value: temperature,\n            unit: \"°C\"\n        },\n        humidity: {\n            value: humidity,\n            unit: \"%\"\n        },\n        illuminance: {\n            value: illuminance,\n            unit: \"lx\"\n        },\n        rainfall: {\n            value: rainfall,\n            unit: \"mm\"\n        },\n        windSpeed: {\n            value: windSpeed,\n            unit: \"m/s\"\n        },\n        windDirection: {\n            value: windDirection,\n            unit: \"\"\n        },\n        pressure: {\n            value: pressure,\n            unit: \"hPa\"\n        }\n    }\n};\n\n// ディレイ情報をステータスに表示\nnode.status({fill:\"green\", shape:\"dot\", text:`T:${temperature}°C H:${humidity}% W:${windSpeed}m/s - ${delay}ms遅延` });\n\n// 遅延後にメッセージを送信\nsetTimeout(() => {\n    node.send(newMsg);\n}, delay);\n\n// 即時の出力を防止（遅延後に送信するため）\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 300,
        "wires": [
            [
                "weather-debug",
                "orion-converter"
            ]
        ]
    },
    {
        "id": "weather-debug",
        "type": "debug",
        "z": "weather-simulation",
        "name": "気象データ",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 180,
        "wires": []
    },
    {
        "id": "orion-converter",
        "type": "function",
        "z": "weather-simulation",
        "name": "Orionエンティティ変換",
        "func": "// Orion Context Broker用のエンティティ形式に変換\nconst weather = msg.payload;\n\n// 現在時刻\nconst timestamp = weather.timestamp;\n\n// SmartDataModels WeatherObservedモデルに準拠したNGSIv2フォーマットに変換\nmsg.payload = {\n    id: \"urn:ngsi-ld:WeatherObserved:\" + weather.id,\n    type: \"WeatherObserved\",\n    dateObserved: {\n        type: \"DateTime\",\n        value: timestamp,\n        metadata: {\n            description: {\n                type: \"Text\",\n                value: \"観測が行われた日時（ISO8601形式）\"\n            }\n        }\n    },\n    temperature: {\n        type: \"Number\",\n        value: weather.temperature.value,\n        metadata: {\n            description: {\n                type: \"Text\",\n                value: \"摂氏単位での気温\"\n            },\n            unitCode: {\n                type: \"Text\",\n                value: \"CEL\"\n            }\n        }\n    },\n    relativeHumidity: {\n        type: \"Number\",\n        value: weather.humidity.value,\n        metadata: {\n            description: {\n                type: \"Text\",\n                value: \"相対湿度のパーセンテージ\"\n            },\n            unitCode: {\n                type: \"Text\",\n                value: \"P1\"\n            }\n        }\n    },\n    illuminance: {\n        type: \"Number\",\n        value: weather.illuminance.value,\n        metadata: {\n            description: {\n                type: \"Text\",\n                value: \"照度（ルクス単位）\"\n            },\n            unitCode: {\n                type: \"Text\",\n                value: \"LX\"\n            }\n        }\n    },\n    precipitation: {\n        type: \"Number\",\n        value: weather.rainfall.value,\n        metadata: {\n            description: {\n                type: \"Text\",\n                value: \"降水量（ミリメートル単位）\"\n            },\n            unitCode: {\n                type: \"Text\",\n                value: \"MMT\"\n            }\n        }\n    },\n    windSpeed: {\n        type: \"Number\",\n        value: weather.windSpeed.value,\n        metadata: {\n            description: {\n                type: \"Text\",\n                value: \"風速（メートル毎秒単位）\"\n            },\n            unitCode: {\n                type: \"Text\",\n                value: \"MTS\"\n            }\n        }\n    },\n    windDirection: {\n        type: \"Text\",\n        value: weather.windDirection.value,\n        metadata: {\n            description: {\n                type: \"Text\",\n                value: \"風向（N:北、NE:北東、E:東、SE:南東、S:南、SW:南西、W:西、NW:北西）\"\n            }\n        }\n    },\n    atmosphericPressure: {\n        type: \"Number\",\n        value: weather.pressure.value,\n        metadata: {\n            description: {\n                type: \"Text\",\n                value: \"大気圧（ヘクトパスカル単位）\"\n            },\n            unitCode: {\n                type: \"Text\",\n                value: \"HPA\"\n            }\n        }\n    },\n    source: {\n        type: \"Text\",\n        value: \"https://github.com/kzkski/fi-red-sim\",\n        metadata: {\n            description: {\n                type: \"Text\",\n                value: \"データソースの参照URL\"\n            }\n        }\n    },\n    dataProvider: {\n        type: \"Text\",\n        value: \"FIWARE-RED-SIM\",\n        metadata: {\n            description: {\n                type: \"Text\",\n                value: \"データプロバイダーの名称\"\n            }\n        }\n    },\n    location: {\n        type: \"geo:json\",\n        value: {\n            type: \"Point\",\n            coordinates: [139.7454, 35.6586] // 東京タワー\n        },\n        metadata: {\n            description: {\n                type: \"Text\",\n                value: \"観測地点の位置情報（東京タワー）\"\n            }\n        }\n    }\n};\n\n// ヘッダー設定はHTTPリクエストノードで直接定義するように変更\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 440,
        "wires": [
            [
                "orion-create"
            ]
        ]
    },
    {
        "id": "orion-create",
        "type": "http request",
        "z": "weather-simulation",
        "name": "Orion UPSERT",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://orion:1026/v2/entities?options=upsert",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": true,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            },
            {
                "keyType": "other",
                "keyValue": "Fiware-Service",
                "valueType": "other",
                "valueValue": "openiot"
            },
            {
                "keyType": "other",
                "keyValue": "Fiware-ServicePath",
                "valueType": "other",
                "valueValue": "/"
            }
        ],
        "x": 800,
        "y": 440,
        "wires": [
            [
                "orion-result"
            ]
        ]
    },
    {
        "id": "orion-result",
        "type": "debug",
        "z": "weather-simulation",
        "name": "Orion結果",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 440,
        "wires": []
    }
] 